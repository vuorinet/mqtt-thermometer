<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <!-- Update viewport settings for better mobile scaling -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>{% block title %}{{ application_name }}{% endblock %}</title>

    <!-- Favicon links for various platforms -->
    <link rel="icon" type="image/x-icon" href="/static/favicon.ico">
    <link rel="apple-touch-icon" sizes="180x180" href="/static/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/static/favicon-16x16.png">

    <!-- Web App Manifest - Multiple paths for maximum compatibility -->
    <link rel="manifest" href="/manifest.json" crossorigin="use-credentials">

    <!-- Essential Meta Tags for Mobile -->
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="application-name" content="{{ application_name }}">
    <meta name="apple-mobile-web-app-title" content="{{ application_name }}">
    <meta name="theme-color" content="#ffffff">

    <!-- Prevent caching for CSS during development -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <!-- Cache-busted CSS with version parameter -->
    <link rel="stylesheet" href="/static/styles.css?v={{ version }}{{ timestamp if timestamp else '' }}">

    {% block head %}{% endblock %}

    <script>
        // Force reload CSS if cached version detected
        document.addEventListener('DOMContentLoaded', function () {
            // Check if landscape mode styles are properly loaded
            setTimeout(function () {
                const testDiv = document.createElement('div');
                testDiv.className = 'heading-container';
                testDiv.style.position = 'absolute';
                testDiv.style.top = '-9999px';
                document.body.appendChild(testDiv);

                const isLandscape = window.innerWidth > window.innerHeight;
                const isMobile = window.matchMedia("(max-width: 1080px)").matches;

                if (isLandscape && isMobile) {
                    // Add landscape class and check if styles apply
                    document.body.classList.add('landscape-mode');
                    const computedStyle = window.getComputedStyle(testDiv);

                    // If flex display isn't applied, CSS might be cached
                    if (computedStyle.display !== 'flex') {
                        console.log('CSS cache detected, forcing reload...');
                        // Force reload by appending random timestamp
                        const links = document.querySelectorAll('link[rel="stylesheet"]');
                        links.forEach(link => {
                            const href = link.href.split('?')[0];
                            link.href = href + '?v={{ version }}&t=' + Date.now();
                        });
                    }
                }

                document.body.removeChild(testDiv);
            }, 100);
        });
    </script>

    <script>
        // PWA update handling
        let newWorker;
        let refreshing = false;

        // Check for service worker updates
        function checkForUpdates() {
            // Monitor for controlling service worker change
            navigator.serviceWorker.addEventListener('controllerchange', () => {
                if (!refreshing) {
                    refreshing = true;
                    window.location.reload();
                }
            });

            navigator.serviceWorker.ready.then(registration => {
                // Check for updates on each page load
                registration.update();

                // Listen for state changes
                registration.addEventListener('updatefound', () => {
                    newWorker = registration.installing;

                    newWorker.addEventListener('statechange', () => {
                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                            showUpdateNotification();
                        }
                    });
                });
            });
        }

        // Show notification when update is available
        function showUpdateNotification() {
            const updateDiv = document.createElement('div');
            updateDiv.id = 'update-notification';
            updateDiv.innerHTML = `
                <div style="position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); 
                            background: #4CAF50; color: white; padding: 10px 20px; border-radius: 4px; 
                            box-shadow: 0 2px 10px rgba(0,0,0,0.2); z-index: 9999; display: flex; 
                            align-items: center; justify-content: space-between; width: 80%; max-width: 400px;">
                    New version available! 
                    <button onclick="updateApp()" style="margin-left: 10px; background: white; color: #4CAF50; 
                             border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">
                        Update now
                    </button>
                </div>
            `;
            document.body.appendChild(updateDiv);
        }

        // Trigger the update when user clicks the button
        function updateApp() {
            if (newWorker) {
                newWorker.postMessage({ action: 'skipWaiting' });
            }
        }

        // Register service worker and handle updates
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/static/sw.js')
                    .then(registration => {
                        console.log('Service Worker registered with scope:', registration.scope);
                        checkForUpdates();
                    })
                    .catch(error => {
                        console.error('Service Worker registration failed:', error);
                    });
            });
        }

        // Auto-refresh when app becomes visible (handles Android background/foreground)
        function setupVisibilityRefresh() {
            let wasHidden = false;
            
            // Track when page becomes hidden
            document.addEventListener('visibilitychange', () => {
                if (document.hidden) {
                    wasHidden = true;
                    console.log('App went to background');
                } else if (wasHidden) {
                    console.log('App returned to foreground - refreshing data');
                    // Small delay to ensure app is fully active
                    setTimeout(() => {
                        refreshData();
                    }, 100);
                }
            });

            // Also refresh on window focus (for desktop/browser usage)
            let wasFocused = true;
            window.addEventListener('focus', () => {
                if (!wasFocused) {
                    console.log('Window regained focus - refreshing data');
                    setTimeout(() => {
                        refreshData();
                    }, 100);
                }
                wasFocused = true;
            });

            window.addEventListener('blur', () => {
                wasFocused = false;
            });

            // Simple network connectivity monitor
            window.addEventListener('online', () => {
                console.log('Network connection restored - refreshing data');
                refreshData();
            });
        }

        // Refresh data without reloading the page
        function refreshData() {
            // Trigger htmx data refresh for chart container if it exists
            const chartContainer = document.querySelector('[hx-get="temperatures"]');
            if (chartContainer && window.htmx) {
                console.log('Triggering htmx data refresh');
                window.htmx.trigger(chartContainer, 'load');
                return; // htmx will handle both chart and legends update
            }
            
            // If no htmx container found, fall back to page reload
            console.log('No htmx containers found, falling back to page reload');
            window.location.reload();
        }

        // Make refreshData globally available
        window.refreshData = refreshData;        // Initialize visibility refresh
        setupVisibilityRefresh();

        // Refresh the app (used by update notifications and manual refresh)
        function refreshApp() {
            refreshData();
        }
    </script>

</head>

<body>
    {% block content %}{% endblock %}
</body>

</html>
