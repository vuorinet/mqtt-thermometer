name: Docker CI/CD Pipeline

on:
  push:
    branches:
      - master

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mqtt-thermometer

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.meta.outputs.json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Optimized caching for GitHub free plan
          cache-from: type=gha,scope=${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}

  deploy-home:
    name: Deploy to Raspberry Pi Home
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: [self-hosted, Linux, ARM64, raspi-home]
    environment:
      name: home
      url: http://192.168.1.x:8000
    steps:
      - name: Checkout repository (for deployment files)
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy Docker container
        run: |
          # Ensure deployment directory exists
          sudo mkdir -p /srv/mqtt-thermometer/config

          # Copy production Docker Compose file
          sudo cp docker-compose.production.yml /srv/mqtt-thermometer/docker-compose.yml

          # Copy home-specific configuration
          sudo cp config/mqtt-thermometer-home.toml /srv/mqtt-thermometer/config/mqtt-thermometer.toml

          # Navigate to deployment directory
          cd /srv/mqtt-thermometer

          # Stop existing services
          docker compose down || true

          # Clean up old/unused images on Pi
          docker image prune -f

          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

          # Start services with new image
          docker compose up -d

      - name: Verify deployment
        run: |
          # Wait for container to start
          sleep 10

          # Check if container is running
          cd /srv/mqtt-thermometer
          docker compose ps | grep mqtt-thermometer

          # Health check
          curl -f http://localhost:8000/temperatures || exit 1

  deploy-cottage:
    name: Deploy to Raspberry Pi Cottage
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: [self-hosted, Linux, ARM64, raspi-cottage]
    environment:
      name: cottage
      url: http://cottage.local:8000
    steps:
      - name: Checkout repository (for deployment files)
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy Docker container
        run: |
          # Ensure deployment directory exists
          sudo mkdir -p /srv/mqtt-thermometer/config

          # Copy production Docker Compose file
          sudo cp docker-compose.production.yml /srv/mqtt-thermometer/docker-compose.yml

          # Copy cottage-specific configuration
          sudo cp config/mqtt-thermometer-cottage.toml /srv/mqtt-thermometer/config/mqtt-thermometer.toml

          # Navigate to deployment directory
          cd /srv/mqtt-thermometer

          # Stop existing services
          docker compose down || true

          # Clean up old/unused images on Pi
          docker image prune -f

          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

          # Start services with new image
          docker compose up -d

      - name: Verify deployment
        run: |
          # Wait for container to start
          sleep 10

          # Check if container is running
          cd /srv/mqtt-thermometer
          docker compose ps | grep mqtt-thermometer

          # Health check
          curl -f http://localhost:8000/temperatures || exit 1
